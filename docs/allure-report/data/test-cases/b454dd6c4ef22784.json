{"uid":"b454dd6c4ef22784","name":"test_create_enrich_flow","fullName":"tests.test_enrich_flow#test_create_enrich_flow","historyId":"e76c272966b967109d091bf05fdd4c4e","time":{"start":1728741449086,"stop":1728741461411,"duration":12325},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=129.0.6668.90)\nStacktrace:\n\tGetHandleVerifier [0x00007FF75637B095+29557]\n\t(No symbol) [0x00007FF7562EFA50]\n\t(No symbol) [0x00007FF7561AB399]\n\t(No symbol) [0x00007FF756200B0F]\n\t(No symbol) [0x00007FF7561F354E]\n\t(No symbol) [0x00007FF75622718A]\n\t(No symbol) [0x00007FF7561F2E86]\n\t(No symbol) [0x00007FF7562273A0]\n\t(No symbol) [0x00007FF75624851C]\n\t(No symbol) [0x00007FF756226F33]\n\t(No symbol) [0x00007FF7561F116F]\n\t(No symbol) [0x00007FF7561F22D1]\n\tGetHandleVerifier [0x00007FF7566AC96D+3378253]\n\tGetHandleVerifier [0x00007FF7566F8497+3688311]\n\tGetHandleVerifier [0x00007FF7566ED1CB+3642539]\n\tGetHandleVerifier [0x00007FF75643A6B6+813462]\n\t(No symbol) [0x00007FF7562FAB5F]\n\t(No symbol) [0x00007FF7562F6B74]\n\t(No symbol) [0x00007FF7562F6D10]\n\t(No symbol) [0x00007FF7562E5C1F]\n\tBaseThreadInitThunk [0x00007FFC3D90257D+29]\n\tRtlUserThreadStart [0x00007FFC3EE8AF28+40]","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a9574ec36297803e1807a0440dc2f67f\")>\n\n    def test_create_enrich_flow(browser):\n        browser.get('http://localhost:8000/home/')\n        time.sleep(2)\n        browser.find_element(By.XPATH, \"//a[@data-track-id='main-navigation--flows']\").click()\n        time.sleep(2)\n        browser.find_element(By.XPATH, \"//button[@title='Create flow']\").click()\n        time.sleep(4)\n        browser.find_element(By.XPATH, \"//button[@data-tooltip-content='Data source']\").click()\n        time.sleep(3)\n>       browser.find_element(By.XPATH, \"//span[text()='Upload file']\").click()\n\ntests\\test_enrich_flow.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001C9B35ABD00>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF7562E5C1F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC3D90257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFC3EE8AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=129.0.6668.90)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF75637B095+29557]\nE       \t(No symbol) [0x00007FF7562EFA50]\nE       \t(No symbol) [0x00007FF7561AB399]\nE       \t(No symbol) [0x00007FF756200B0F]\nE       \t(No symbol) [0x00007FF7561F354E]\nE       \t(No symbol) [0x00007FF75622718A]\nE       \t(No symbol) [0x00007FF7561F2E86]\nE       \t(No symbol) [0x00007FF7562273A0]\nE       \t(No symbol) [0x00007FF75624851C]\nE       \t(No symbol) [0x00007FF756226F33]\nE       \t(No symbol) [0x00007FF7561F116F]\nE       \t(No symbol) [0x00007FF7561F22D1]\nE       \tGetHandleVerifier [0x00007FF7566AC96D+3378253]\nE       \tGetHandleVerifier [0x00007FF7566F8497+3688311]\nE       \tGetHandleVerifier [0x00007FF7566ED1CB+3642539]\nE       \tGetHandleVerifier [0x00007FF75643A6B6+813462]\nE       \t(No symbol) [0x00007FF7562FAB5F]\nE       \t(No symbol) [0x00007FF7562F6B74]\nE       \t(No symbol) [0x00007FF7562F6D10]\nE       \t(No symbol) [0x00007FF7562E5C1F]\nE       \tBaseThreadInitThunk [0x00007FFC3D90257D+29]\nE       \tRtlUserThreadStart [0x00007FFC3EE8AF28+40]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser","time":{"start":1728741251856,"stop":1728741258725,"duration":6869},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"hasContent":false,"stepsCount":0}],"afterStages":[{"name":"browser::0","time":{"start":1728741473000,"stop":1728741475129,"duration":2129},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"attachmentStep":false,"hasContent":false,"stepsCount":0}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_enrich_flow"},{"name":"host","value":"ARMORSAGA"},{"name":"thread","value":"24204-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_enrich_flow"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"b454dd6c4ef22784.json","parameterValues":[]}