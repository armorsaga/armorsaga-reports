{"uid":"ce5967607093cb64","name":"test_create_enrich_flow","fullName":"tests.test_enrich_flow#test_create_enrich_flow","historyId":"e76c272966b967109d091bf05fdd4c4e","time":{"start":1728297543572,"stop":1728297555776,"duration":12204},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=129.0.6668.90)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6C9F8B645+29573]\n\t(No symbol) [0x00007FF6C9F00470]\n\t(No symbol) [0x00007FF6C9DBB519]\n\t(No symbol) [0x00007FF6C9E10C8F]\n\t(No symbol) [0x00007FF6C9E036BE]\n\t(No symbol) [0x00007FF6C9E372FA]\n\t(No symbol) [0x00007FF6C9E02FF6]\n\t(No symbol) [0x00007FF6C9E37510]\n\t(No symbol) [0x00007FF6C9E586BC]\n\t(No symbol) [0x00007FF6C9E370A3]\n\t(No symbol) [0x00007FF6C9E012DF]\n\t(No symbol) [0x00007FF6C9E02441]\n\tGetHandleVerifier [0x00007FF6CA2BC58D+3375821]\n\tGetHandleVerifier [0x00007FF6CA307987+3684039]\n\tGetHandleVerifier [0x00007FF6CA2FCDAB+3640043]\n\tGetHandleVerifier [0x00007FF6CA04B7C6+816390]\n\t(No symbol) [0x00007FF6C9F0B77F]\n\t(No symbol) [0x00007FF6C9F075A4]\n\t(No symbol) [0x00007FF6C9F07740]\n\t(No symbol) [0x00007FF6C9EF659F]\n\tBaseThreadInitThunk [0x00007FFF6C04257D+29]\n\tRtlUserThreadStart [0x00007FFF6CB8AF28+40]","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b78f21a1b0c45f7425e436760ff4f39e\")>\n\n    def test_create_enrich_flow(browser):\n        browser.get('http://localhost:8000/home/')\n        time.sleep(2)\n        browser.find_element(By.XPATH, \"//a[@data-track-id='main-navigation--flows']\").click()\n        time.sleep(2)\n        browser.find_element(By.XPATH, \"//button[@title='Create flow']\").click()\n        time.sleep(4)\n        browser.find_element(By.XPATH, \"//button[@data-tooltip-content='Data source']\").click()\n        time.sleep(3)\n>       browser.find_element(By.XPATH, \"//span[text()='Upload file']\").click()\n\ntests\\test_enrich_flow.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001FD02963490>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF6C9EF659F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF6C04257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFF6CB8AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=129.0.6668.90)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6C9F8B645+29573]\nE       \t(No symbol) [0x00007FF6C9F00470]\nE       \t(No symbol) [0x00007FF6C9DBB519]\nE       \t(No symbol) [0x00007FF6C9E10C8F]\nE       \t(No symbol) [0x00007FF6C9E036BE]\nE       \t(No symbol) [0x00007FF6C9E372FA]\nE       \t(No symbol) [0x00007FF6C9E02FF6]\nE       \t(No symbol) [0x00007FF6C9E37510]\nE       \t(No symbol) [0x00007FF6C9E586BC]\nE       \t(No symbol) [0x00007FF6C9E370A3]\nE       \t(No symbol) [0x00007FF6C9E012DF]\nE       \t(No symbol) [0x00007FF6C9E02441]\nE       \tGetHandleVerifier [0x00007FF6CA2BC58D+3375821]\nE       \tGetHandleVerifier [0x00007FF6CA307987+3684039]\nE       \tGetHandleVerifier [0x00007FF6CA2FCDAB+3640043]\nE       \tGetHandleVerifier [0x00007FF6CA04B7C6+816390]\nE       \t(No symbol) [0x00007FF6C9F0B77F]\nE       \t(No symbol) [0x00007FF6C9F075A4]\nE       \t(No symbol) [0x00007FF6C9F07740]\nE       \t(No symbol) [0x00007FF6C9EF659F]\nE       \tBaseThreadInitThunk [0x00007FFF6C04257D+29]\nE       \tRtlUserThreadStart [0x00007FFF6CB8AF28+40]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser","time":{"start":1728297348118,"stop":1728297350009,"duration":1891},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"afterStages":[{"name":"browser::0","time":{"start":1728297559198,"stop":1728297561486,"duration":2288},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_enrich_flow"},{"name":"host","value":"ARMORSAGA"},{"name":"thread","value":"8408-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_enrich_flow"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"ce5967607093cb64.json","parameterValues":[]}